{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"GENERATE_DATA_IMAGES","version":"0.3.2","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"nLVPZ3uS_YAR","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"outputId":"c14e0d87-62d3-4d2a-8e9a-b628c9af5a4b","executionInfo":{"status":"ok","timestamp":1538691896308,"user_tz":420,"elapsed":2987,"user":{"displayName":"Adrian Mai","photoUrl":"","userId":"03385859993315629030"}}},"cell_type":"code","source":["\n","!pip install pydot"],"execution_count":92,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: pydot in /usr/local/lib/python3.6/dist-packages (1.2.4)\n","Requirement already satisfied: pyparsing>=2.1.4 in /usr/local/lib/python3.6/dist-packages (from pydot) (2.2.2)\n"],"name":"stdout"}]},{"metadata":{"id":"TaGn-jrV03Um","colab_type":"code","colab":{}},"cell_type":"code","source":["import tensorflow as tf"],"execution_count":0,"outputs":[]},{"metadata":{"id":"pPqCqvFtqT8V","colab_type":"code","colab":{}},"cell_type":"code","source":["import numpy as np\n","from keras import layers\n","from keras.layers import Input, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D\n","from keras.layers import AveragePooling2D, MaxPooling2D, Dropout, GlobalMaxPooling2D, GlobalAveragePooling2D\n","from keras.models import Model\n","from keras.preprocessing import image\n","from keras.utils import layer_utils\n","from keras.utils.data_utils import get_file\n","from keras.applications.imagenet_utils import preprocess_input\n","import pydot\n","from IPython.display import SVG\n","from keras.utils.vis_utils import model_to_dot\n","from keras.utils import plot_model\n","import cv2\n","#import tensorflow as tf\n","import keras.backend as K\n","K.set_image_data_format('channels_last')\n","import matplotlib.pyplot as plt\n","from matplotlib.pyplot import imshow\n","\n","%matplotlib inline"],"execution_count":0,"outputs":[]},{"metadata":{"id":"49D6ePBiQi8X","colab_type":"code","colab":{}},"cell_type":"code","source":["\n","  #extracting grids\n"," # x_grid,y_grid = np.meshgrid(np.arange(0, w), np.arange(0,h))\n"," # print (\"center_x = \" + str(center_x) + \" center_y = \" + str(center_y) + \" radius =\" + str(radius))\n","  #img[center_x - radius < img and img < center_x + radius and img > center_y - radius and img < center_y + radius] = 255\n"," \n","  \n","  #masking_region = (x_grid - center_x)**2 + (y_grid - center_y) ** 2 \n","  #img[masking_region < radius**2] = 255\n","  #x_trains[:, :, :, i] = img.astype(np.uint8)\n","  #x_trains[:,:,:,i] = x_trains[:, :, :, i].astype(np.uint8)\n","  #img = Image.fromarray(img, 'RGB')\n","  "],"execution_count":0,"outputs":[]},{"metadata":{"id":"WlwusiBsIc9r","colab_type":"code","colab":{}},"cell_type":"code","source":["def draw_circle_with_opencv(h, w, num_samples):\n","  #Array storing images\n","  img_array = np.zeros((num_samples, h, w, 3),np.uint8)\n","  #Array storing lables\n","  label_array = np.zeros((num_samples, 3))\n","  for i in range(0, num_samples):\n","    #Create blank image\n","    img = np.zeros((h, w, 3), np.uint8)\n","    #Make the image all white\n","    img[:, :] = [255, 255, 255]\n","    #Generate random center points, height and width\n","    center_x = np.random.randint(5, w)\n","    center_y = np.random.randint(5, h)\n","    radius = np.random.randint(1,min(65 - center_x, 65 - center_y, center_x + 1, center_y + 1))\n","    label_array[i,:] = (center_x*2/63.) - 1, (center_y*2/63.) - 1, radius/31.5\n","    #Draw back circle \n","    img = cv2.circle(img, (center_x, center_y), radius, (0, 0, 0), -1 )\n","    img_array[i,:,:,:] = img.astype(np.uint8)\n","  return img_array,label_array\n","  \n","  \n","  "],"execution_count":0,"outputs":[]},{"metadata":{"id":"1KVYDMKpdXUn","colab_type":"code","colab":{}},"cell_type":"code","source":["test_array, label_array = draw_circle_with_opencv(64, 64 , 70000)\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"Lyydb-6GZPj_","colab_type":"code","colab":{}},"cell_type":"code","source":["#Normalize image to [-1, 1] range\n","def normalize_MNIST_images(x):\n","  return 2*x.astype(np.float64)/255 - 1"],"execution_count":0,"outputs":[]},{"metadata":{"id":"rznJJ5zTbaYG","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"3OjZkZWTsUDS","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":285},"outputId":"7749640d-255b-4a21-e356-0624f744d398","executionInfo":{"status":"ok","timestamp":1538691905209,"user_tz":420,"elapsed":716,"user":{"displayName":"Adrian Mai","photoUrl":"","userId":"03385859993315629030"}}},"cell_type":"code","source":["#cv2.imshow(\"img\", test_array[:,:,:,1].astype(np.uint8))\n","plt.imshow(test_array[22,:,:,:].astype(np.uint8))"],"execution_count":98,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7fbde3f9a550>"]},"metadata":{"tags":[]},"execution_count":98},{"output_type":"display_data","data":{"image/png":"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\nRK5CYII=\n","text/plain":["<matplotlib.figure.Figure at 0x7fbde3f6b7b8>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"gFQ4W4tKv3ve","colab_type":"code","colab":{}},"cell_type":"code","source":["def ShapeRegc_Model(input_shape):\n","    \"\"\"\n","    Implementation of the HappyModel.\n","    \n","    Arguments:\n","    input_shape -- shape of the images of the dataset\n","\n","    Returns:\n","    model -- a Model() instance in Keras\n","    \"\"\"\n","    \n","    \n","    X_input = Input(input_shape)\n","\n","    # Zero-Padding: pads the border of X_input with zeroes\n","    X = ZeroPadding2D((3, 3))(X_input)\n","\n","    # CONV -> BN -> RELU Block applied to X\n","    X = Conv2D(32, (7, 7), strides = (1, 1), name = 'conv0')(X)\n","    X = BatchNormalization(axis = 3, name = 'bn0')(X)\n","    X = Activation('relu')(X)\n","    \n","    \n","    # MAXPOOL\n","    X = MaxPooling2D((2, 2), name='max_pool')(X)\n","    \n","    # 29 by 29 by 32\n","    \n","    # CONV -> BN -> RELU Block applied to X\n","    X = ZeroPadding2D((3, 3))(X)\n","    X = Conv2D(64, (5, 5), strides = (1, 1), name = 'conv1')(X)\n","    X = BatchNormalization(axis = 3, name = 'bn1')(X)\n","    X = Activation('relu')(X)\n","    \n","    # MAXPOOL\n","    X = MaxPooling2D((2, 2), name='max_pool_1')(X)\n","\n","    # 12 by 12 by 64\n","    # CONV -> BN -> RELU Block applied to X\n","    \n","    X = Conv2D(128, (6, 6), strides = (1, 1), name = 'conv2')(X)\n","    X = BatchNormalization(axis = 3, name = 'bn2')(X)\n","    X = Activation('relu')(X)\n","   \n","    # CONV -> BN -> RELU Block applied to X\n","    X = Conv2D(128, (4, 4), strides = (1, 1), name = 'conv3')(X)\n","    X = BatchNormalization(axis = 3, name = 'bn3')(X)\n","    X = Activation('relu')(X)\n","    \n","     # CONV -> BN -> RELU Block applied to X\n","    X = Conv2D(256, (1, 1), strides = (1, 1), name = 'conv4')(X)\n","    X = BatchNormalization(axis = 3, name = 'bn4')(X)\n","    X = Activation('relu')(X)\n","    X = MaxPooling2D((2, 2), name='max_pool_3')(X)\n","     # CONV -> BN -> RELU Block applied to X\n","    X = Conv2D(512, (3, 3), strides = (1, 1), name = 'conv5')(X)\n","    X = BatchNormalization(axis = 3, name = 'bn5')(X)\n","    X = Activation('relu')(X)\n","    \n","    \n","   \n","    # FLATTEN X (means convert it to a vector) + FULLYCONNECTED\n","    X = Flatten()(X)\n","    #X = Dense(64, activation='relu')(X)   \n","    #X = Dense(128, activation='relu')(X)    \n","    #X = Dense(256, activation='relu')(X)   \n","    #X = Dense(64, activation='relu')(X)\n","    X = Dense(3)(X)\n","    \n","\n","    # Create model. This creates your Keras model instance, you'll use this instance to train/test the model.\n","    ShapeRegc_Model = Model(inputs = X_input, outputs = X, name='ShapeRegc_Model')\n","\n","    \n","    return ShapeRegc_Model"],"execution_count":0,"outputs":[]},{"metadata":{"id":"L6vGbUOV8xqX","colab_type":"code","colab":{}},"cell_type":"code","source":["#Plit data into 2 sets\n","X_train = test_array[:69000,:,:,:]\n","Y_train = label_array[:69000,:]\n","X_test = test_array[69000:,:,:,:]\n","Y_test = label_array[69000:,:]\n","X_train = normalize_MNIST_images(X_train)\n","X_test = normalize_MNIST_images(X_test)\n","#print(X_train.min(), X_train.max(), X_train.dtype)\n","\n","#X_train = X_train/255.\n","#X_test = X_test/255.\n","#Y_train = Y_train/63.\n","#Y_test = Y_test/63."],"execution_count":0,"outputs":[]},{"metadata":{"id":"nFSQ1QIfASmW","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":153},"outputId":"320c0f02-d961-4fe7-b06d-fec55f846eb1","executionInfo":{"status":"ok","timestamp":1538691915311,"user_tz":420,"elapsed":381,"user":{"displayName":"Adrian Mai","photoUrl":"","userId":"03385859993315629030"}}},"cell_type":"code","source":["print (\"number of training examples = \" + str(X_train.shape[0]))\n","print (\"number of test examples = \" + str(X_test.shape[0]))\n","print (\"X_train shape: \" + str(X_train.shape))\n","print (\"Y_train shape: \" + str(Y_train.shape))\n","print (\"X_test shape: \" + str(X_test.shape))\n","print (\"Y_test shape: \" + str(Y_test.shape))\n","print (\"Y_test max: \" + str(Y_test.max()))\n","print (\"X_test max: \" + str(X_test.min()))"],"execution_count":101,"outputs":[{"output_type":"stream","text":["number of training examples = 69000\n","number of test examples = 1000\n","X_train shape: (69000, 64, 64, 3)\n","Y_train shape: (69000, 3)\n","X_test shape: (1000, 64, 64, 3)\n","Y_test shape: (1000, 3)\n","Y_test max: 1.0\n","X_test max: -1.0\n"],"name":"stdout"}]},{"metadata":{"id":"jBOVUP5jARpz","colab_type":"text"},"cell_type":"markdown","source":[""]},{"metadata":{"id":"4BfU-8D932hh","colab_type":"code","colab":{}},"cell_type":"code","source":["ShapeRegc_Model = ShapeRegc_Model((64, 64, 3))"],"execution_count":0,"outputs":[]},{"metadata":{"id":"LLVdi5fFwFNu","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1020},"outputId":"a9ff5f83-5e9d-49a4-c45d-1d461d8b29b0","executionInfo":{"status":"ok","timestamp":1538691917214,"user_tz":420,"elapsed":300,"user":{"displayName":"Adrian Mai","photoUrl":"","userId":"03385859993315629030"}}},"cell_type":"code","source":["ShapeRegc_Model.summary()"],"execution_count":103,"outputs":[{"output_type":"stream","text":["_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_12 (InputLayer)        (None, 64, 64, 3)         0         \n","_________________________________________________________________\n","zero_padding2d_20 (ZeroPaddi (None, 70, 70, 3)         0         \n","_________________________________________________________________\n","conv0 (Conv2D)               (None, 64, 64, 32)        4736      \n","_________________________________________________________________\n","bn0 (BatchNormalization)     (None, 64, 64, 32)        128       \n","_________________________________________________________________\n","activation_60 (Activation)   (None, 64, 64, 32)        0         \n","_________________________________________________________________\n","max_pool (MaxPooling2D)      (None, 32, 32, 32)        0         \n","_________________________________________________________________\n","zero_padding2d_21 (ZeroPaddi (None, 38, 38, 32)        0         \n","_________________________________________________________________\n","conv1 (Conv2D)               (None, 34, 34, 64)        51264     \n","_________________________________________________________________\n","bn1 (BatchNormalization)     (None, 34, 34, 64)        256       \n","_________________________________________________________________\n","activation_61 (Activation)   (None, 34, 34, 64)        0         \n","_________________________________________________________________\n","max_pool_1 (MaxPooling2D)    (None, 17, 17, 64)        0         \n","_________________________________________________________________\n","conv2 (Conv2D)               (None, 12, 12, 128)       295040    \n","_________________________________________________________________\n","bn2 (BatchNormalization)     (None, 12, 12, 128)       512       \n","_________________________________________________________________\n","activation_62 (Activation)   (None, 12, 12, 128)       0         \n","_________________________________________________________________\n","conv3 (Conv2D)               (None, 9, 9, 128)         262272    \n","_________________________________________________________________\n","bn3 (BatchNormalization)     (None, 9, 9, 128)         512       \n","_________________________________________________________________\n","activation_63 (Activation)   (None, 9, 9, 128)         0         \n","_________________________________________________________________\n","conv4 (Conv2D)               (None, 9, 9, 256)         33024     \n","_________________________________________________________________\n","bn4 (BatchNormalization)     (None, 9, 9, 256)         1024      \n","_________________________________________________________________\n","activation_64 (Activation)   (None, 9, 9, 256)         0         \n","_________________________________________________________________\n","max_pool_3 (MaxPooling2D)    (None, 4, 4, 256)         0         \n","_________________________________________________________________\n","conv5 (Conv2D)               (None, 2, 2, 512)         1180160   \n","_________________________________________________________________\n","bn5 (BatchNormalization)     (None, 2, 2, 512)         2048      \n","_________________________________________________________________\n","activation_65 (Activation)   (None, 2, 2, 512)         0         \n","_________________________________________________________________\n","flatten_11 (Flatten)         (None, 2048)              0         \n","_________________________________________________________________\n","dense_11 (Dense)             (None, 3)                 6147      \n","=================================================================\n","Total params: 1,837,123\n","Trainable params: 1,834,883\n","Non-trainable params: 2,240\n","_________________________________________________________________\n"],"name":"stdout"}]},{"metadata":{"id":"3FQ0SGm1_ovE","colab_type":"code","colab":{}},"cell_type":"code","source":["def yolo_loss(y_true, y_predicted):\n","   print(y_true.get_shape())\n","   return K.mean((y_true[:,0] - y_predicted[:,0])**2 + (y_true[:,1] - y_predicted[:,1])**2) + K.mean( (tf.keras.backend.sqrt(y_true[:,2]) - tf.keras.backend.sqrt(y_predicted[:,2]))**2 )"],"execution_count":0,"outputs":[]},{"metadata":{"id":"A8y_iMgI9Jye","colab_type":"code","colab":{}},"cell_type":"code","source":["ShapeRegc_Model.compile(optimizer='adam', loss = \"mean_squared_error\" , metrics=['accuracy'])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"hmCNZk1u00Wy","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"AbPztBKdCMJZ","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"Y7_1Lb_K9r27","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":442},"outputId":"35db8292-5fd9-46ad-a649-c9b8b4173a93","executionInfo":{"status":"ok","timestamp":1538692482773,"user_tz":420,"elapsed":563077,"user":{"displayName":"Adrian Mai","photoUrl":"","userId":"03385859993315629030"}}},"cell_type":"code","source":["ShapeRegc_Model.fit(X_train, Y_train, epochs=12, batch_size=1024) # batch size is important"],"execution_count":106,"outputs":[{"output_type":"stream","text":["Epoch 1/12\n","69000/69000 [==============================] - 50s 719us/step - loss: 0.3293 - acc: 0.8311\n","Epoch 2/12\n","69000/69000 [==============================] - 46s 673us/step - loss: 0.0071 - acc: 0.9399\n","Epoch 3/12\n","69000/69000 [==============================] - 47s 676us/step - loss: 0.0050 - acc: 0.9396\n","Epoch 4/12\n","69000/69000 [==============================] - 47s 682us/step - loss: 0.0037 - acc: 0.9492\n","Epoch 5/12\n","69000/69000 [==============================] - 47s 676us/step - loss: 0.0043 - acc: 0.9456\n","Epoch 6/12\n","69000/69000 [==============================] - 46s 670us/step - loss: 0.0035 - acc: 0.9551\n","Epoch 7/12\n","69000/69000 [==============================] - 46s 669us/step - loss: 0.0026 - acc: 0.9586\n","Epoch 8/12\n","69000/69000 [==============================] - 46s 669us/step - loss: 0.0035 - acc: 0.9545\n","Epoch 9/12\n","69000/69000 [==============================] - 46s 672us/step - loss: 0.0030 - acc: 0.9563\n","Epoch 10/12\n","69000/69000 [==============================] - 47s 675us/step - loss: 0.0024 - acc: 0.9632\n","Epoch 11/12\n","69000/69000 [==============================] - 46s 669us/step - loss: 0.0019 - acc: 0.9673\n","Epoch 12/12\n","69000/69000 [==============================] - 47s 676us/step - loss: 0.0020 - acc: 0.9692\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fbde3f2a080>"]},"metadata":{"tags":[]},"execution_count":106}]},{"metadata":{"id":"Pyap75niCZlk","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":85},"outputId":"ff82b4f8-da02-4ad5-c95f-72d9a18d8669","executionInfo":{"status":"ok","timestamp":1538692484393,"user_tz":420,"elapsed":1531,"user":{"displayName":"Adrian Mai","photoUrl":"","userId":"03385859993315629030"}}},"cell_type":"code","source":["preds =  ShapeRegc_Model.evaluate(X_test, Y_test, batch_size=64, verbose=1, sample_weight=None)\n","### END CODE HERE ###\n","print()\n","print (\"Loss = \" + str(preds[0]))\n","print (\"Test Accuracy = \" + str(preds[1]))"],"execution_count":107,"outputs":[{"output_type":"stream","text":["1000/1000 [==============================] - 1s 989us/step\n","\n","Loss = 0.0025090041048824786\n","Test Accuracy = 0.974\n"],"name":"stdout"}]},{"metadata":{"id":"EBrwuOoVClKj","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"outputId":"c573a0f5-0738-4426-f454-883dbf0496c1","executionInfo":{"status":"ok","timestamp":1538692485594,"user_tz":420,"elapsed":1136,"user":{"displayName":"Adrian Mai","photoUrl":"","userId":"03385859993315629030"}}},"cell_type":"code","source":["x,y = draw_circle_with_opencv(64,64,1)\n","print(ShapeRegc_Model.predict(2*x.astype(np.float64)/255 - 1))\n","print(y)"],"execution_count":108,"outputs":[{"output_type":"stream","text":["[[-0.6036035 -0.7273072  0.065493 ]]\n","[[-0.61904762 -0.68253968  0.06349206]]\n"],"name":"stdout"}]},{"metadata":{"id":"2S6IS7QLbdUA","colab_type":"code","colab":{}},"cell_type":"code","source":["import numpy as np\n","import keras\n","from keras import layers\n","from keras.layers import Input, Add, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D, AveragePooling2D, MaxPooling2D, GlobalMaxPooling2D\n","from keras.models import Model, load_model\n","from keras.preprocessing import image\n","from keras.utils import layer_utils\n","from keras.utils.data_utils import get_file\n","from keras.applications.imagenet_utils import preprocess_input\n","import pydot\n","from IPython.display import SVG\n","from keras.utils.vis_utils import model_to_dot\n","from keras.utils import plot_model\n","#from resnets_utils import *\n","from keras.initializers import glorot_uniform\n","import scipy.misc\n","from matplotlib.pyplot import imshow\n","%matplotlib inline\n","\n","import keras.backend as K\n","K.set_image_data_format('channels_last')\n","K.set_learning_phase(1)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"tGAruYQL07tI","colab_type":"code","colab":{}},"cell_type":"code","source":["def identity_block(X, f, filters, stage, block):\n","    \"\"\"\n","    Implementation of the identity block as defined in Figure 3\n","    \n","    Arguments:\n","    X -- input tensor of shape (m, n_H_prev, n_W_prev, n_C_prev)\n","    f -- integer, specifying the shape of the middle CONV's window for the main path\n","    filters -- python list of integers, defining the number of filters in the CONV layers of the main path\n","    stage -- integer, used to name the layers, depending on their position in the network\n","    block -- string/character, used to name the layers, depending on their position in the network\n","    \n","    Returns:\n","    X -- output of the identity block, tensor of shape (n_H, n_W, n_C)\n","    \"\"\"\n","    \n","    # defining name basis\n","    conv_name_base = 'res' + str(stage) + block + '_branch'\n","    bn_name_base = 'bn' + str(stage) + block + '_branch'\n","    \n","    # Retrieve Filters\n","    F1, F2, F3 = filters\n","    \n","    # Save the input value. You'll need this later to add back to the main path. \n","    X_shortcut = X\n","    \n","    # First component of main path\n","    X = Conv2D(filters = F1, kernel_size = (1, 1), strides = (1,1), padding = 'valid', name = conv_name_base + '2a', kernel_initializer = glorot_uniform(seed=0))(X)\n","    X = BatchNormalization(axis = 3, name = bn_name_base + '2a')(X)\n","    X = Activation('relu')(X)\n","    \n","    ### START CODE HERE ###\n","    \n","    # Second component of main path (≈3 lines)\n","    X = Conv2D(filters = F2, kernel_size = (f, f), strides = (1,1), padding = 'same', name = conv_name_base + '2b', kernel_initializer = glorot_uniform(seed=0))(X)\n","    X = BatchNormalization(axis = 3, name = bn_name_base + '2b')(X)\n","    X = Activation('relu')(X)\n","\n","    # Third component of main path (≈2 lines)\n","    X = Conv2D(filters = F3, kernel_size = (1, 1), strides = (1,1), padding = 'valid', name = conv_name_base + '2c', kernel_initializer = glorot_uniform(seed=0))(X)\n","    X = BatchNormalization(axis = 3, name = bn_name_base + '2c')(X)\n","\n","    # Final step: Add shortcut value to main path, and pass it through a RELU activation (≈2 lines)\n","    X=Add()([X,X_shortcut])\n","    X = Activation('relu')(X)\n","    \n","    ### END CODE HERE ###\n","    \n","    return X"],"execution_count":0,"outputs":[]},{"metadata":{"id":"apemlJWU1BEr","colab_type":"code","colab":{}},"cell_type":"code","source":["def convolutional_block(X, f, filters, stage, block, s = 2):\n","    \"\"\"\n","    Implementation of the convolutional block as defined in Figure 4\n","    \n","    Arguments:\n","    X -- input tensor of shape (m, n_H_prev, n_W_prev, n_C_prev)\n","    f -- integer, specifying the shape of the middle CONV's window for the main path\n","    filters -- python list of integers, defining the number of filters in the CONV layers of the main path\n","    stage -- integer, used to name the layers, depending on their position in the network\n","    block -- string/character, used to name the layers, depending on their position in the network\n","    s -- Integer, specifying the stride to be used\n","    \n","    Returns:\n","    X -- output of the convolutional block, tensor of shape (n_H, n_W, n_C)\n","    \"\"\"\n","    \n","    # defining name basis\n","    conv_name_base = 'res' + str(stage) + block + '_branch'\n","    bn_name_base = 'bn' + str(stage) + block + '_branch'\n","    \n","    # Retrieve Filters\n","    F1, F2, F3 = filters\n","    \n","    # Save the input value\n","    X_shortcut = X\n","\n","\n","    ##### MAIN PATH #####\n","    # First component of main path \n","    X = Conv2D(F1, (1, 1), strides = (s,s), name = conv_name_base + '2a', kernel_initializer = glorot_uniform(seed=0))(X)\n","    X = BatchNormalization(axis = 3, name = bn_name_base + '2a')(X)\n","    X = Activation('relu')(X)\n","    \n","    ### START CODE HERE ###\n","\n","    # Second component of main path (≈3 lines)\n","    X = Conv2D(F2, (f, f), strides = (1,1), name = conv_name_base + '2b',padding = 'same', kernel_initializer = glorot_uniform(seed=0))(X)\n","    X = BatchNormalization(axis = 3, name = bn_name_base + '2b')(X)\n","    X = Activation('relu')(X)\n","\n","    # Third component of main path (≈2 lines)\n","    X = Conv2D(F3, (1, 1), strides = (1,1), name = conv_name_base + '2c',padding = 'valid', kernel_initializer = glorot_uniform(seed=0))(X)\n","    X = BatchNormalization(axis = 3, name = bn_name_base + '2c')(X)\n","    ##### SHORTCUT PATH #### (≈2 lines)\n","    X_shortcut = Conv2D(F3, (1, 1), strides = (s,s), name = conv_name_base + '1',padding = 'valid', kernel_initializer = glorot_uniform(seed=0))(X_shortcut)\n","    X_shortcut = BatchNormalization(axis = 3, name = bn_name_base + '1')(X_shortcut)\n","\n","\n","    # Final step: Add shortcut value to main path, and pass it through a RELU activation (≈2 lines)\n","    X = Add()([X,X_shortcut])\n","    X = Activation('relu')(X)\n","    \n","    ### END CODE HERE ###\n","    \n","    return X"],"execution_count":0,"outputs":[]},{"metadata":{"id":"7U7wEH0Z1CS0","colab_type":"code","colab":{}},"cell_type":"code","source":["# GRADED FUNCTION: ResNet50\n","\n","def ResNet50(input_shape = (64, 64, 3), classes = 3):\n","    \"\"\"\n","    Implementation of the popular ResNet50 the following architecture:\n","    CONV2D -> BATCHNORM -> RELU -> MAXPOOL -> CONVBLOCK -> IDBLOCK*2 -> CONVBLOCK -> IDBLOCK*3\n","    -> CONVBLOCK -> IDBLOCK*5 -> CONVBLOCK -> IDBLOCK*2 -> AVGPOOL -> TOPLAYER\n","\n","    Arguments:\n","    input_shape -- shape of the images of the dataset\n","    classes -- integer, number of classes\n","\n","    Returns:\n","    model -- a Model() instance in Keras\n","    \"\"\"\n","    \n","    # Define the input as a tensor with shape input_shape\n","    X_input = Input(input_shape)\n","\n","    \n","    # Zero-Padding\n","    X = ZeroPadding2D((3, 3))(X_input)\n","    \n","    # Stage 1\n","    X = Conv2D(64, (7, 7), strides=(2, 2), name='conv1', kernel_initializer=glorot_uniform(seed=0))(X)\n","    X = BatchNormalization(axis=3, name='bn_conv1')(X)\n","    X = Activation('relu')(X)\n","    X = MaxPooling2D((3, 3), strides=(2, 2))(X)\n","\n","    # Stage 2\n","    X = convolutional_block(X, f=3, filters=[64, 64, 256], stage=2, block='a', s=1)\n","    X = identity_block(X, 3, [64, 64, 256], stage=2, block='b')\n","    X = identity_block(X, 3, [64, 64, 256], stage=2, block='c')\n","\n","    ### START CODE HERE ###\n","\n","    # Stage 3\n","    X = convolutional_block(X, f=3, filters=[128, 128, 512], stage=3, block='a', s=2)\n","    X = identity_block(X, 3, [128, 128, 512], stage=3, block='b')\n","    X = identity_block(X, 3, [128, 128, 512], stage=3, block='c')\n","    X = identity_block(X, 3, [128, 128, 512], stage=3, block='d')\n","\n","    # Stage 4\n","    X = convolutional_block(X, f=3, filters=[256, 256, 1024], stage=4, block='a', s=2)\n","    X = identity_block(X, 3, [256, 256, 1024], stage=4, block='b')\n","    X = identity_block(X, 3, [256, 256, 1024], stage=4, block='c')\n","    X = identity_block(X, 3, [256, 256, 1024], stage=4, block='d')\n","    X = identity_block(X, 3, [256, 256, 1024], stage=4, block='e')\n","    X = identity_block(X, 3, [256, 256, 1024], stage=4, block='f')\n","\n","    # Stage 5\n","    X = convolutional_block(X, f=3, filters=[512, 512, 2048], stage=5, block='a', s=2)\n","    X = identity_block(X, 3, [512, 512, 2048], stage=5, block='b')\n","    X = identity_block(X, 3, [512, 512, 2048], stage=5, block='c')\n","\n","\n","    # AVGPOOL (≈1 line). Use \"X = AveragePooling2D(...)(X)\"\n","    X = AveragePooling2D(pool_size=[2,2],name='avg_pool',padding='same')(X)\n","    \n","    ### END CODE HERE ###\n","\n","    # output layer\n","    X = Flatten()(X)\n","    X = Dense(64, activation='relu')(X)\n","    X = Dense(128, activation='relu')(X)\n","    X = Dense(256, activation='relu')(X)\n","    X = Dense(64, activation='relu')(X)\n","    X = Dense(classes)(X)\n","    \n","    \n","    # Create model\n","    model = Model(inputs = X_input, outputs = X, name='ResNet50')\n","\n","    return model"],"execution_count":0,"outputs":[]},{"metadata":{"id":"JkI8wer11GcM","colab_type":"code","colab":{}},"cell_type":"code","source":["model = ResNet50(input_shape = (64, 64, 3), classes = 3)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"t4gcFruT1Pk0","colab_type":"code","colab":{}},"cell_type":"code","source":["model.compile(optimizer='adam', loss='mean_absolute_error', metrics=['accuracy'])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"6RdRaoAd1mes","colab_type":"code","colab":{}},"cell_type":"code","source":["#Plit data into 2 sets\n","X_train = test_array[:69000,:,:,:]\n","Y_train = label_array[:69000,:]\n","X_test = test_array[69000:,:,:,:]\n","Y_test = label_array[69000:,:]\n","X_train = X_train/255.\n","X_test = X_test/255.\n","Y_test = Y_test/63.\n","Y_train = Y_train/63."],"execution_count":0,"outputs":[]},{"metadata":{"id":"--7ylc_JI_uL","colab_type":"code","colab":{}},"cell_type":"code","source":["#Plit data into 2 sets\n","X_train = test_array[:59000,:,:,:]\n","Y_train = label_array[:59000,:]\n","X_test = test_array[59000:,:,:,:]\n","Y_test = label_array[59000:,:]\n","X_train = X_train * 2/255. -1\n","X_test = X_test * 2/255. - 1 \n","#print(X_train.min(), X_train.max(), X_train.dtype)\n","\n","#X_train = X_train/255.\n","#X_test = X_test/255.\n","#Y_train = Y_train/63.\n","#Y_test = Y_test/63."],"execution_count":0,"outputs":[]},{"metadata":{"id":"tvucmu801yzN","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":153},"outputId":"3ffa8d9b-aa76-4a2b-a2b5-5b1d94b00884","executionInfo":{"status":"ok","timestamp":1538692507901,"user_tz":420,"elapsed":892,"user":{"displayName":"Adrian Mai","photoUrl":"","userId":"03385859993315629030"}}},"cell_type":"code","source":["print (\"number of training examples = \" + str(X_train.shape[0]))\n","print (\"number of test examples = \" + str(X_test.shape[0]))\n","print (\"X_train shape: \" + str(X_train.shape))\n","print (\"Y_train shape: \" + str(Y_train.shape))\n","print (\"X_test shape: \" + str(X_test.shape))\n","print (\"Y_test shape: \" + str(Y_test.shape))\n","print (\"Y_test max: \" + str(Y_test.max()))\n","print (\"X_test max: \" + str(X_train.max()))"],"execution_count":117,"outputs":[{"output_type":"stream","text":["number of training examples = 59000\n","number of test examples = 11000\n","X_train shape: (59000, 64, 64, 3)\n","Y_train shape: (59000, 3)\n","X_test shape: (11000, 64, 64, 3)\n","Y_test shape: (11000, 3)\n","Y_test max: 1.0\n","X_test max: -0.0039215686274509665\n"],"name":"stdout"}]},{"metadata":{"id":"UgcCNy__33cs","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":85},"outputId":"c3ca68c1-3c1d-42af-87c8-81e764389e55"},"cell_type":"code","source":["model.fit(X_train, Y_train, epochs = 6, batch_size = 512)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Epoch 1/6\n","59000/59000 [==============================] - 150s 3ms/step - loss: 0.1046 - acc: 0.9021\n","Epoch 2/6\n","23552/59000 [==========>...................] - ETA: 1:17 - loss: 0.0416 - acc: 0.9627"],"name":"stdout"}]},{"metadata":{"id":"uG01gM4S60rc","colab_type":"code","colab":{}},"cell_type":"code","source":["preds = model.evaluate(X_test, Y_test)\n","print (\"Loss = \" + str(preds[0]))\n","print (\"Test Accuracy = \" + str(preds[1]))"],"execution_count":0,"outputs":[]},{"metadata":{"id":"Oa7ldmIeH-r4","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"r7hpJ5jf67z9","colab_type":"code","colab":{}},"cell_type":"code","source":["\n","x,y = draw_circle_with_opencv(64,64,1)\n","x.shape\n","print(model.predict(x))\n","print(y/63.)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"BpqrQHyvCXFL","colab_type":"code","colab":{}},"cell_type":"code","source":["x,y = draw_circle_with_opencv(64,64,1)\n","x.shape\n","print(model.predict(x))\n","print(y)"],"execution_count":0,"outputs":[]}]}